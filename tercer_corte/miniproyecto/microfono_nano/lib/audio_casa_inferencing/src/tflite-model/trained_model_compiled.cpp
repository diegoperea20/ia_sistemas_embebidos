/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 19.11.2022 15:38:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 14544;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.033401571214199066, } };
const TfArray<1, int> quant0_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 1664, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[16*3*3*1] = { 
  /* [0][0][][] */ -127, -116, 22, 
  /* [0][1][][] */ 87, 105, -45, 
  /* [0][2][][] */ -82, -77, -54, 
  /* [1][0][][] */ 85, -52, 12, 
  /* [1][1][][] */ 127, -21, 42, 
  /* [1][2][][] */ 113, -28, 27, 
  /* [2][0][][] */ -11, -95, -109, 
  /* [2][1][][] */ -127, -41, -35, 
  /* [2][2][][] */ 25, -20, 37, 
  /* [3][0][][] */ -23, -49, 97, 
  /* [3][1][][] */ 69, 17, 74, 
  /* [3][2][][] */ 65, 127, 91, 
  /* [4][0][][] */ 96, -106, 68, 
  /* [4][1][][] */ 114, -118, 127, 
  /* [4][2][][] */ 51, -106, 74, 
  /* [5][0][][] */ 88, 48, -23, 
  /* [5][1][][] */ 71, 40, 16, 
  /* [5][2][][] */ 127, -64, 49, 
  /* [6][0][][] */ -127, -113, -66, 
  /* [6][1][][] */ 82, -87, -81, 
  /* [6][2][][] */ -50, 68, 59, 
  /* [7][0][][] */ -60, 6, 67, 
  /* [7][1][][] */ -59, -91, -127, 
  /* [7][2][][] */ -19, -76, -100, 
  /* [8][0][][] */ 81, -25, -1, 
  /* [8][1][][] */ 127, -54, 18, 
  /* [8][2][][] */ 99, -81, 12, 
  /* [9][0][][] */ 3, -27, -28, 
  /* [9][1][][] */ -20, 91, -81, 
  /* [9][2][][] */ 127, 116, -34, 
  /* [10][0][][] */ -91, 118, -117, 
  /* [10][1][][] */ 74, -127, 30, 
  /* [10][2][][] */ 50, -79, -4, 
  /* [11][0][][] */ 84, 105, -49, 
  /* [11][1][][] */ 127, 104, -54, 
  /* [11][2][][] */ 112, 33, -49, 
  /* [12][0][][] */ 54, 22, -41, 
  /* [12][1][][] */ -30, 60, 127, 
  /* [12][2][][] */ 6, -103, -88, 
  /* [13][0][][] */ 14, 5, 6, 
  /* [13][1][][] */ -75, -127, -62, 
  /* [13][2][][] */ 48, 79, 98, 
  /* [14][0][][] */ -99, -101, -33, 
  /* [14][1][][] */ 127, 117, 84, 
  /* [14][2][][] */ -42, -20, -1, 
  /* [15][0][][] */ 15, 123, -47, 
  /* [15][1][][] */ 106, 127, -62, 
  /* [15][2][][] */ 111, 67, -59, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant3_scale = { 16, { 0.0020027251448482275, 0.0031527397222816944, 0.0023319332394748926, 0.002760864794254303, 0.0019136492628604174, 0.0021993436384946108, 0.0023907611612230539, 0.0023566854652017355, 0.0027366902213543653, 0.0026054910849779844, 0.002625785069540143, 0.0025703322608023882, 0.0020371894352138042, 0.0022012481931596994, 0.0025714205112308264, 0.0029965341091156006, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[16] = { -1084, -1547, -940, -1562, -2784, -1215, -1575, -875, -1781, -2374, -1449, -1314, -1413, -1180, -1012, -3301, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<16, float> quant4_scale = { 16, { 6.6894164774566889e-05, 0.0001053064625011757, 7.789023220539093e-05, 9.2217218480072916e-05, 6.3918894738890231e-05, 7.3461531428620219e-05, 7.9855177318677306e-05, 7.8716999269090593e-05, 9.1409754531923681e-05, 8.7027496192604303e-05, 8.7705346231814474e-05, 8.5853134805802256e-05, 6.804533040849492e-05, 7.3525145126041025e-05, 8.5889485490042716e-05, 0.00010008894605562091, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*3*3*16] = { 
  /* [0][0][][] */ -64,-85,-52,45,44,-105,-54,-3,37,28,7,29,60,-78,-6,-98, 0,47,-69,-72,-92,-83,48,-8,-7,-115,2,-5,42,-84,-5,-117, -110,-98,-78,-4,-83,59,-47,-82,28,-6,4,-79,29,12,-94,-90, 
  /* [0][1][][] */ 19,-82,19,18,-43,-102,-108,21,-49,-78,80,-20,5,-45,-6,-1, -11,18,-27,50,-30,-49,-107,29,52,-54,-116,11,-92,-124,-102,-46, 8,-42,24,6,-97,49,-54,-39,-120,20,-114,-19,21,35,-100,-54, 
  /* [0][2][][] */ -37,-55,-56,28,-89,49,-83,-90,-15,65,-5,-14,-115,-6,6,-127, -54,-35,-21,17,-77,36,12,-46,-5,36,-9,-36,10,-69,-76,-118, -74,57,-41,-54,32,32,62,-52,-47,5,39,-46,-10,21,-29,-53, 
  /* [1][0][][] */ -72,-111,-3,15,-111,-80,-99,-47,20,14,34,-109,64,-44,19,-17, -59,56,-3,-95,-35,53,-50,62,43,39,-100,-103,-71,-50,-14,-78, -96,-21,26,44,-49,35,-11,23,48,-104,24,51,-10,14,-94,-76, 
  /* [1][1][][] */ -87,-45,35,-6,15,-13,50,52,-11,-30,-83,-5,-47,72,-6,-77, -97,31,6,-12,-51,13,-3,18,-22,-127,-52,-67,9,-22,20,-18, -46,-19,-91,32,-48,-22,13,5,2,-3,-71,-63,-123,-9,29,58, 
  /* [1][2][][] */ -31,-5,71,55,-6,-115,-94,-96,46,-32,20,-11,-42,-72,-103,48, 71,-51,44,5,-111,-105,34,14,-120,-42,-8,-86,20,9,-64,-120, -67,2,9,-66,9,-15,-14,-66,-32,-112,-85,-107,50,19,24,41, 
  /* [2][0][][] */ -46,27,-20,6,58,1,-27,-32,9,34,31,-4,-4,-9,-20,12, -12,-22,22,-22,-14,26,-11,-39,3,43,58,41,-32,-21,-33,20, -25,17,-29,47,2,-25,7,-56,23,-21,-30,-70,5,32,-6,2, 
  /* [2][1][][] */ -55,71,-36,-33,127,-8,-23,-27,75,-18,-40,16,11,19,-61,24, -55,4,34,-43,-24,11,-70,6,11,-10,20,-12,-57,-38,-81,21, 28,11,-14,32,32,-125,-44,12,-5,-45,-18,-33,-12,-20,-85,-63, 
  /* [2][2][][] */ -32,61,-17,13,59,15,-7,-38,-1,55,-3,-38,-22,52,21,-37, -23,-33,-8,-9,-70,10,6,-35,16,26,-37,-2,-17,13,7,8, 19,9,-3,37,43,-10,-14,15,17,-57,-22,-13,-29,-3,11,-37, 
  /* [3][0][][] */ -76,-19,-59,-46,-37,-25,41,63,-29,4,-64,39,-59,-56,43,-56, -25,72,-52,10,-49,-60,-21,-37,-101,26,-102,-98,-107,32,-86,53, -90,22,-30,55,10,-88,-72,22,-65,78,58,-45,-67,-2,41,-14, 
  /* [3][1][][] */ -27,45,-97,13,-35,-70,-56,-51,-41,17,50,-15,-106,-127,-110,-115, -74,-74,-98,-67,57,-20,80,-114,57,-87,41,-94,52,-101,-44,22, 68,-9,-99,-41,-83,-116,-1,1,-101,67,-88,75,74,36,7,-99, 
  /* [3][2][][] */ -33,-39,44,51,2,50,5,44,19,-39,-85,-44,-76,68,-41,-94, -22,-99,-77,8,-65,-64,63,-60,-14,71,-24,-15,65,-107,-37,-29, 35,-29,-4,72,-35,-80,-44,-73,-42,-93,-33,31,-2,-51,-71,-78, 
  /* [4][0][][] */ 0,38,29,-34,-23,31,-30,20,10,49,-66,-41,14,-38,-34,-56, -113,-43,9,-4,-38,14,-83,-44,-85,41,-48,-15,24,-17,-62,-5, 4,126,32,68,-26,55,15,-93,25,48,50,23,-109,40,13,3, 
  /* [4][1][][] */ -1,53,-16,-48,20,14,-19,-15,9,-23,-45,-42,68,-28,59,-66, -16,-96,-101,43,-46,16,-77,-77,-110,6,-127,36,-10,-70,10,62, -43,85,-83,54,35,80,-47,-53,23,12,-51,54,-4,-35,40,0, 
  /* [4][2][][] */ 6,-46,-4,-13,-65,-53,48,10,16,-70,-67,10,-44,33,3,16, -76,-76,11,-49,-9,-33,30,30,-24,-82,-103,-21,11,37,-36,-3, -2,-23,-52,23,-6,14,-43,-2,6,-81,-39,-10,47,-54,40,-71, 
  /* [5][0][][] */ 54,-79,119,-2,-61,-97,39,68,-64,-17,23,-108,-4,44,-4,-122, -18,-57,-32,-32,-86,29,-93,-30,-82,6,-37,-16,37,-22,17,48, -40,74,-43,45,36,61,-10,-62,-14,-15,-52,5,-39,-10,17,-39, 
  /* [5][1][][] */ 74,-18,28,-62,-29,-54,87,19,-68,13,0,-52,32,15,54,-91, 74,-89,34,36,-69,-36,3,66,-108,-30,-12,-19,-7,-2,65,8, -43,51,-30,2,25,-3,-70,-43,11,-19,0,-3,42,-35,56,37, 
  /* [5][2][][] */ 15,-20,77,-127,-50,-60,28,91,44,-48,0,-24,-13,43,26,-62, 42,-92,-6,5,-11,-96,78,27,-55,16,16,-53,-66,82,43,16, -24,21,50,-4,49,12,12,42,58,36,42,-5,-3,25,-44,37, 
  /* [6][0][][] */ 61,11,45,-70,-9,-4,86,11,-4,-9,59,-41,-11,-6,-85,-64, 73,-127,67,26,-113,-57,-21,44,-73,-22,63,-120,60,-14,-2,-104, 23,-95,-14,36,-42,51,23,-22,-72,-56,6,12,8,50,45,-44, 
  /* [6][1][][] */ -1,-28,23,2,-12,26,82,58,-57,-4,-2,-9,27,-27,-85,-42, 25,-124,59,47,-58,-110,34,111,-63,73,13,-84,68,80,-46,-59, 49,-111,76,35,-31,34,4,-18,-98,-7,-54,-85,63,69,-25,-96, 
  /* [6][2][][] */ 49,18,14,18,23,54,54,-25,-20,61,57,29,28,-3,65,4, 76,-23,44,-65,-34,-26,22,-8,-12,11,85,-1,45,47,121,-26, 89,-1,56,47,-42,53,63,68,-43,31,0,8,-31,47,19,21, 
  /* [7][0][][] */ 42,-9,-8,40,-37,-10,107,11,-103,0,-23,-18,75,10,122,-16, -27,31,13,57,3,-11,36,-27,-9,86,17,-90,-19,37,6,-60, 39,127,-31,81,36,80,-3,-18,35,-8,12,-27,24,-1,60,-6, 
  /* [7][1][][] */ 42,-120,-5,-78,-69,-57,-27,73,-68,-72,-4,-37,97,15,34,-39, -14,-13,-11,35,-53,-17,-8,20,1,-44,-35,-33,85,40,85,-83, 72,-5,58,-73,99,80,-34,25,62,21,20,-35,51,64,112,-28, 
  /* [7][2][][] */ 13,12,58,62,-46,-47,50,-25,-89,74,-36,-20,8,67,92,31, 37,-25,42,-55,-52,9,25,71,-73,-49,-39,-82,57,56,96,-38, 35,-17,-42,1,12,45,0,-58,-54,-64,-39,-64,96,29,108,-107, 
  /* [8][0][][] */ -59,32,-30,14,-45,-86,44,57,-31,20,-46,37,-66,-88,29,-26, 25,-31,13,-69,-53,-54,-94,58,-7,-78,-113,-5,-63,-16,-76,-116, -31,-105,-98,-61,-5,-8,-92,-68,12,25,4,-9,53,83,-102,17, 
  /* [8][1][][] */ -43,-102,-87,-28,-101,-57,25,-95,-76,17,54,-66,-86,-81,-1,6, 36,-81,-13,14,40,-27,-72,-43,-87,-12,-29,10,40,-83,-60,16, 54,16,-5,-111,-87,-47,-20,-36,-127,-7,-77,21,-4,-78,-31,-111, 
  /* [8][2][][] */ 64,-121,46,-16,-72,-89,29,66,82,-22,-61,-102,-104,-63,-66,-41, -25,-113,40,21,-96,-90,-26,3,36,41,-35,-110,-120,-47,-51,27, 44,9,-120,-87,-82,-43,34,-19,-60,-60,-3,-69,-104,13,3,-30, 
  /* [9][0][][] */ -66,18,17,-122,-5,67,2,38,-99,33,-21,26,-81,8,24,-61, -26,-16,-63,19,-64,-43,21,-125,-6,1,-62,43,-84,-98,40,5, 29,-103,-28,-13,-33,35,-74,-75,-48,21,53,6,23,17,-90,-68, 
  /* [9][1][][] */ -57,35,26,-5,31,-85,4,-78,-103,-75,-12,41,-112,-30,-81,-6, 48,-117,-127,-35,34,-7,-90,43,-64,-10,-7,36,-95,-75,-4,-85, -60,-78,-94,7,-62,-53,-94,-19,44,-47,-88,-96,60,-51,5,-16, 
  /* [9][2][][] */ -22,-93,14,21,17,-43,21,-31,32,4,42,-2,-20,-68,-44,-53, 56,-20,67,6,-68,-52,0,12,-101,12,-73,6,18,10,-83,-80, 81,-73,22,-58,3,18,39,4,-32,-62,22,12,66,9,-71,-45, 
  /* [10][0][][] */ 18,72,-7,30,29,-2,92,78,69,63,26,92,-80,-18,-39,61, 31,-127,28,-84,-19,-49,1,58,-45,-84,22,-52,41,56,-27,-67, -62,11,-96,10,-23,59,-43,-70,2,25,-39,51,-15,20,47,20, 
  /* [10][1][][] */ -11,60,-43,-58,13,-9,-3,-119,67,117,-4,96,-12,-101,-77,96, 61,-94,8,-45,-78,-112,32,69,-99,-11,-37,-98,-8,10,59,-78, -5,-13,-39,53,-9,47,-70,0,-29,-61,-21,-14,-10,-39,57,10, 
  /* [10][2][][] */ -48,-26,-70,-34,-106,-9,-16,-90,-14,19,-26,17,-20,-4,-3,96, 8,-48,34,-7,-75,-102,28,-22,-23,-23,-26,-43,-1,-9,61,-94, -3,16,-90,39,-19,15,-102,-70,13,9,-30,-30,41,21,9,-17, 
  /* [11][0][][] */ -20,0,2,40,19,16,-44,-22,-5,0,-3,16,9,-11,-9,11, -51,29,-36,-6,-10,-19,-25,-12,-8,-50,1,-16,-33,-14,-48,-57, -38,27,5,51,55,0,-21,-36,21,70,-22,5,-9,53,-3,98, 
  /* [11][1][][] */ 35,-43,4,7,40,-83,-33,-5,-32,-63,-26,-18,-5,-5,37,-31, 15,-31,-27,-19,-24,-13,-14,-50,-12,-29,-127,-36,40,-32,-3,-38, -25,17,-15,44,13,12,-6,-66,-12,31,2,16,8,10,27,62, 
  /* [11][2][][] */ -14,-6,13,-15,12,10,-6,24,12,-19,0,-17,-32,-3,24,-29, -1,-56,-22,-8,-62,-64,27,-10,-22,-49,-44,-33,-14,-44,-41,-64, -40,16,-6,-5,-2,-16,18,-22,-6,14,-32,-14,10,-44,13,10, 
  /* [12][0][][] */ 24,-31,24,-22,-23,-11,27,37,-41,-24,-29,-57,-46,-35,-3,-65, -18,55,-20,-2,55,-5,-18,-42,-18,25,-39,-16,-9,-62,-55,-23, -42,-26,-64,-65,-23,31,-66,-59,27,-72,-70,23,-17,-127,-35,41, 
  /* [12][1][][] */ -32,25,3,-29,25,24,22,69,27,5,91,0,-42,-43,11,-27, -16,31,-40,-23,-67,12,3,-17,22,23,31,61,8,-49,33,64, 6,-88,-47,-36,-2,-43,15,43,-5,13,-8,-76,-7,7,-56,0, 
  /* [12][2][][] */ -13,32,-25,51,12,44,12,-112,29,48,-81,66,-26,-55,5,93, -36,-67,15,-64,-51,-25,-36,-42,-52,-58,57,12,27,-28,-47,2, 39,-76,40,-48,-35,-20,22,60,-73,-4,-6,-23,-4,7,17,20, 
  /* [13][0][][] */ -55,-105,-105,-66,-109,1,32,-113,-76,-99,-56,36,18,19,-30,42, -84,-5,-58,-83,52,-13,-81,35,-10,-59,-71,61,-3,-82,36,31, -114,33,11,-54,-86,-58,12,-33,-112,-72,30,-115,-110,5,11,-11, 
  /* [13][1][][] */ 29,-2,-63,-72,-46,60,-54,31,25,39,-3,-121,-109,19,47,-83, -8,-115,-62,-113,-35,44,-45,4,-127,56,-101,7,30,-100,-11,-8, -66,-98,41,22,38,-58,32,-99,-42,70,-74,-73,78,-70,30,-51, 
  /* [13][2][][] */ 58,-11,-123,18,-74,-78,-33,56,45,-105,8,-121,-102,-78,8,-58, 69,-51,-116,-122,5,-12,20,-115,-51,49,45,49,-58,-13,63,-71, -39,5,57,-80,-65,-83,-18,-117,-13,-87,-103,-28,-30,22,27,-24, 
  /* [14][0][][] */ -20,11,-106,-27,79,-50,-10,-56,-56,59,-24,16,-110,41,-38,60, -56,76,-40,-8,92,-15,-54,-10,110,-61,-34,-60,-8,46,-20,-72, 28,80,34,-30,38,21,-39,14,58,-4,16,-76,15,37,-36,-101, 
  /* [14][1][][] */ 71,-39,55,62,82,9,-34,5,-100,89,61,46,-45,15,64,110, -112,80,-29,41,24,14,-63,-45,42,51,54,-52,1,31,27,17, -91,47,-43,-38,84,31,72,-93,8,10,5,-103,-10,-119,-83,-31, 
  /* [14][2][][] */ -54,-1,-1,-57,127,-88,-65,-5,-5,-25,65,-22,47,-2,-45,5, -83,46,-120,-38,-33,41,-9,5,51,26,-5,45,127,-94,31,-27, -59,35,-53,19,64,-26,22,40,7,-124,-5,-103,-70,-112,-46,-79, 
  /* [15][0][][] */ 36,21,-31,-74,-10,-53,43,127,25,40,44,-3,-35,11,-71,6, -37,-7,36,-24,-8,-22,8,71,-46,10,20,-27,29,36,-5,-16, 12,-47,-48,56,54,-31,10,-12,-28,-12,-16,14,11,-11,22,-35, 
  /* [15][1][][] */ -28,20,26,-91,-17,-23,28,23,33,60,-56,61,5,-8,-13,49, 19,-48,28,-79,-74,-69,-3,19,-52,-76,-12,-39,12,-11,-26,6, -64,49,0,3,54,28,-40,-36,13,-61,-47,24,-43,-70,-30,-39, 
  /* [15][2][][] */ -21,43,50,-4,-46,-49,5,-11,14,20,0,-34,-13,-54,-60,1, 12,-82,19,-84,-76,-78,3,5,-77,-52,0,-80,-15,9,9,-90, -2,34,-2,-6,42,16,-17,-4,38,-59,-15,-14,0,0,-39,-71, 
  /* [16][0][][] */ -25,67,-96,-58,-23,-40,-101,-65,-76,45,56,-7,-45,39,-80,53, -16,-53,-73,-127,18,0,30,-8,-21,58,-92,38,-28,-29,-90,-116, -22,-10,15,54,29,9,-43,15,-98,-17,39,-3,-112,-90,-74,-33, 
  /* [16][1][][] */ -74,69,-34,-115,-57,-56,-66,36,49,35,64,-19,-5,14,48,-92, -99,-77,-5,-16,49,-87,-2,31,-72,5,11,-51,-71,-113,-58,-62, -22,9,29,-100,16,44,-62,44,-21,-53,-42,30,-33,35,-16,6, 
  /* [16][2][][] */ -42,-69,54,33,-62,-75,-83,-32,-27,26,-62,-42,-61,-7,-53,-119, -101,-78,-53,59,-55,70,-115,10,-76,-4,-38,-2,-75,19,-122,-28, -2,-39,38,36,-17,52,-18,46,-62,35,35,43,-117,-95,-91,15, 
  /* [17][0][][] */ 4,6,-3,33,9,11,45,13,69,32,52,34,-14,19,-36,-32, -20,-78,61,15,19,-44,36,-12,-83,91,-41,5,-6,54,-82,63, -6,37,-40,38,-5,49,-17,-42,58,-42,6,6,-13,-32,2,-25, 
  /* [17][1][][] */ -11,19,11,15,-2,8,64,6,-27,-16,-37,-28,-41,25,-37,-71, -76,-64,-11,59,-24,-16,-18,-95,-101,61,-94,53,-51,-21,-90,66, -66,2,-49,25,49,62,-100,-49,31,-102,-29,19,-60,-13,-24,-99, 
  /* [17][2][][] */ 24,-10,-13,49,1,53,-35,-63,-47,-80,-62,-63,10,-17,33,-46, -24,-16,-80,68,4,19,-3,-106,-38,88,-127,72,13,-53,69,69, -80,-20,-84,-5,32,-39,-54,-65,19,-73,-58,-23,-28,-95,-1,-36, 
  /* [18][0][][] */ 37,-83,32,-54,-115,27,6,104,-81,4,20,1,67,61,108,-24, 68,-51,25,-32,-38,75,88,113,-27,-9,127,-24,59,73,102,-3, 107,-38,32,39,-37,-38,56,18,-2,58,12,-86,-16,91,73,-21, 
  /* [18][1][][] */ 15,-58,29,-82,-89,6,34,-94,-26,-36,-2,36,62,46,-5,29, 66,1,-21,-31,-24,-13,81,-25,-28,-94,-55,-117,4,-14,65,-63, 22,-20,35,-13,-26,-54,-8,59,-42,-57,-40,-8,4,13,77,-28, 
  /* [18][2][][] */ 37,-43,78,-107,-108,-67,-18,14,-9,-8,-9,-33,94,13,-10,-41, -45,-88,-4,-43,-11,-26,-26,43,-13,-24,26,-84,-15,21,21,-88, 50,-32,33,64,4,-21,9,0,-69,-28,-1,-33,-13,77,76,-14, 
  /* [19][0][][] */ -6,-54,39,14,-58,27,91,15,-94,24,62,-28,0,79,-17,18, 78,-31,33,-60,-73,4,19,77,-59,93,100,-84,103,96,-9,-47, 48,-97,57,74,-46,24,-7,-11,-122,45,10,-65,7,61,20,9, 
  /* [19][1][][] */ -9,-23,33,-23,2,50,-19,14,-35,17,38,-31,127,-41,83,-33, 69,-36,-17,-3,-21,14,58,-75,-10,-2,28,-19,-4,-70,43,-61, 49,-43,-7,25,-53,46,70,-22,-57,-52,-26,34,-10,45,57,-5, 
  /* [19][2][][] */ -12,-30,10,-57,-36,-101,54,110,-2,-35,35,-68,-15,29,16,-44, 4,4,37,94,42,-14,79,-7,-21,-3,67,-22,1,-9,62,-3, 8,-2,42,-41,21,8,22,18,-80,16,-38,-4,-33,16,7,-32, 
  /* [20][0][][] */ -3,-26,-73,13,-61,-49,-96,44,-93,61,103,46,-7,-28,-41,-115, -69,-9,15,-27,-120,52,-45,-47,-65,-5,-45,-35,-22,20,-4,46, 61,-33,-42,-106,-40,-93,-42,-44,-10,-96,-34,-76,-11,45,-55,76, 
  /* [20][1][][] */ -43,-86,-33,20,110,5,1,-94,35,-77,-77,-94,-48,70,1,-60, 33,-54,30,-77,-29,-82,-46,25,72,25,-25,-29,-22,22,32,-42, -98,-49,-83,-112,-60,47,-92,-49,-84,-96,-119,100,-62,-20,-59,-24, 
  /* [20][2][][] */ -9,-126,-32,-48,-57,21,24,-92,-32,-43,49,-52,-30,-94,-105,-56, -65,-59,72,24,36,15,-65,-20,31,-120,-127,50,-93,14,25,58, -32,35,-14,28,-46,-93,-71,-52,47,-80,2,-114,7,-94,-28,-30, 
  /* [21][0][][] */ -82,2,47,54,-104,10,35,-93,-37,-31,-33,17,23,-27,-75,41, -40,-71,-46,-81,58,-10,-17,25,-122,48,48,-49,48,-82,34,-50, -36,55,33,-33,-58,-67,-98,-65,23,57,-106,-18,-41,68,22,-32, 
  /* [21][1][][] */ -106,-127,31,21,-95,-62,-93,-63,46,-38,16,-36,29,-31,-99,-100, -102,61,-30,-2,-18,-42,49,-99,11,44,-79,-49,0,-76,-86,-76, -99,-97,-101,-4,-13,27,-60,-44,-79,-34,21,-67,-2,-126,-114,-109, 
  /* [21][2][][] */ -117,-96,-36,-32,-75,42,-115,-64,-66,-38,-39,49,5,5,42,42, -105,-47,36,-13,-80,42,-85,54,-39,22,22,-89,-20,-83,-88,-116, -46,41,-26,-4,-14,-115,-42,-63,-62,1,22,43,-3,-55,-10,5, 
  /* [22][0][][] */ 1,63,43,31,35,-6,22,-42,34,-36,-14,-19,-2,-40,9,-39, -33,-16,-65,-24,-89,-8,2,-56,-9,63,-12,58,-14,-56,47,38, -54,3,30,40,74,-6,-52,27,-31,-56,40,-48,-45,-53,-42,-20, 
  /* [22][1][][] */ 24,-28,17,-33,-2,-7,0,-19,35,-67,12,-72,-26,26,16,-59, -30,-20,-59,16,-40,11,-90,-63,-28,109,-72,53,-56,-19,-25,13, -23,77,23,-5,23,66,39,24,71,19,77,-34,-22,-9,-39,-127, 
  /* [22][2][][] */ 55,61,36,8,-7,-41,25,-8,18,-61,-27,-54,-61,-16,-63,-91, -31,-84,-39,10,-35,-22,-34,31,-84,-42,-103,30,12,17,-38,5, -6,-32,-9,-43,-7,-23,-48,-35,74,-21,20,22,-37,-72,-65,-85, 
  /* [23][0][][] */ -50,-68,16,27,-16,49,10,-63,-72,-20,14,42,-22,11,14,26, 29,83,-45,13,18,91,-10,-57,73,27,-10,61,-27,0,23,22, -23,-15,18,-24,-7,-50,-1,-29,0,-5,-27,20,-49,35,-56,-23, 
  /* [23][1][][] */ 52,-77,-14,5,21,-40,11,10,-64,5,22,15,-63,8,24,28, -115,76,-52,9,33,55,-30,-36,84,-43,-1,51,-37,-55,-127,-13, -15,-52,-52,13,6,6,-19,-4,-24,-14,39,8,0,-7,-38,12, 
  /* [23][2][][] */ 52,-112,39,-5,6,-87,46,53,-49,-33,-13,-63,3,53,-33,-21, -16,-10,-42,-5,31,5,-12,-15,27,-16,-13,19,-7,8,11,2, -31,-20,0,59,20,19,-19,-45,18,-15,16,32,-44,-2,31,-25, 
  /* [24][0][][] */ -30,-26,-69,20,-106,60,48,-10,-31,-10,-67,79,-2,33,-30,80, -31,-38,107,24,-11,-19,17,54,-15,98,-80,-22,44,-9,-87,-39, 52,-120,-24,13,-54,-42,-32,25,-127,-63,-68,-71,47,-53,-31,-104, 
  /* [24][1][][] */ 63,3,-37,-76,-20,21,-5,77,-19,-52,-19,26,47,-2,74,-29, 71,-5,93,-79,-47,-53,-20,4,-76,-1,49,19,42,61,62,54, 78,-9,1,23,-11,-3,96,22,-76,-55,-13,-88,8,4,81,-55, 
  /* [24][2][][] */ -39,0,65,44,-38,-3,71,-9,-66,-2,4,-49,12,25,-49,6, 54,-38,11,89,-38,-54,42,17,-95,19,-59,-15,-33,89,102,-7, 11,-13,-108,-66,23,-21,-18,-5,-5,-19,7,30,8,37,-4,18, 
  /* [25][0][][] */ -49,22,18,4,95,-12,-2,-58,53,44,-11,25,-4,50,-31,14, 5,34,58,-81,-26,-36,-15,44,38,-39,49,41,-17,-37,-52,29, -16,-111,32,-19,-33,-63,8,-41,-21,-29,-78,-44,15,22,1,26, 
  /* [25][1][][] */ 24,58,-88,14,36,51,-27,-56,42,44,-7,74,-79,-96,25,93, -9,26,15,-78,49,-127,2,1,19,-71,5,-28,-2,-48,-3,-60, 28,-99,-28,6,-41,-74,54,37,-97,-13,-27,-82,-60,0,-20,-53, 
  /* [25][2][][] */ -59,47,-52,-29,46,-6,-43,-68,92,-3,6,98,23,-65,-43,-5, -21,3,-11,-67,-17,-35,-12,22,63,-23,52,-3,2,-9,-37,-39, -58,-50,-47,-15,4,-31,-52,13,3,4,-26,3,-26,-86,-65,21, 
  /* [26][0][][] */ 6,21,-35,59,69,-21,18,-47,22,-56,-4,-94,16,20,-69,-32, -102,-2,-65,2,13,-16,-103,-9,2,84,-19,69,-48,-65,-23,40, 10,-49,-30,-88,-19,10,-8,37,30,-45,84,-53,-15,22,-1,6, 
  /* [26][1][][] */ -24,-17,65,89,89,-78,38,-32,-46,-9,-42,-80,-23,23,2,-8, -123,7,-19,-57,-64,52,-99,-127,35,4,-93,63,-28,-67,-98,28, -3,45,-27,-55,-5,5,4,15,8,37,-70,57,4,-62,-58,-64, 
  /* [26][2][][] */ 32,-5,70,72,40,-14,45,-29,-42,47,-1,-47,-46,59,46,-42, -18,35,-91,26,-53,78,-72,-18,5,-40,-80,106,-74,-51,-16,96, 64,-2,42,-38,45,56,61,-77,-17,34,48,-13,24,0,-19,-51, 
  /* [27][0][][] */ 15,-15,-20,4,-51,-5,17,77,-27,93,-9,1,103,94,95,2, 37,-38,31,-46,-41,-20,54,101,-96,85,51,-116,65,72,34,-97, 41,7,74,37,-29,-30,20,28,-25,-18,-23,-47,68,105,127,10, 
  /* [27][1][][] */ 68,-50,57,51,-117,-54,100,-1,-96,39,38,-44,118,44,65,-33, 26,-84,63,90,-66,-43,96,35,-96,4,-39,-79,69,38,88,-17, 51,-106,-13,59,-53,10,2,-105,-112,0,-18,-22,40,42,55,-10, 
  /* [27][2][][] */ 36,-70,-62,-25,-28,-40,-26,25,-40,-24,91,-31,46,60,120,-70, 31,-50,79,68,-45,56,75,-53,-57,-26,59,-48,61,75,26,-1, 60,-54,60,68,-96,37,35,17,-99,18,17,-36,69,-22,23,12, 
  /* [28][0][][] */ -27,-32,24,-104,-47,-14,-105,-5,14,-68,35,31,33,-13,44,-12, -42,-127,2,-4,-37,2,-76,9,-94,-26,-25,32,-79,-27,-64,-72, 20,1,-86,-42,-15,-11,4,-57,-1,-21,46,-112,-8,6,35,-73, 
  /* [28][1][][] */ 30,-123,-24,-14,30,46,-23,-78,12,55,23,-81,-48,-56,-49,25, 55,-5,-5,21,12,-123,-2,43,-55,-43,-59,42,34,-63,-56,-13, 35,-83,-29,-98,-16,-13,-81,-92,-95,31,-49,-45,-24,-53,62,-71, 
  /* [28][2][][] */ -49,-102,-5,-41,32,62,23,-34,43,-97,60,24,40,20,7,-73, 17,-2,22,-113,-90,16,6,5,57,-7,-28,-39,-32,-62,-41,30, -62,29,-66,-8,55,-66,42,-30,-109,-90,-50,-4,-41,15,-29,67, 
  /* [29][0][][] */ -22,53,-38,-37,-16,11,4,-72,-56,5,-14,-55,-27,12,37,-24, 19,-103,26,27,-37,-83,33,-10,-61,13,2,-14,-29,-20,15,6, -33,-5,20,22,-95,1,-31,-21,-63,-3,-47,8,19,-21,-5,32, 
  /* [29][1][][] */ -40,-10,2,57,15,-7,-37,-86,-63,-22,-52,-8,7,-13,22,-13, 13,-52,-54,-26,-55,-21,-7,-29,-7,-28,-3,61,-38,-32,15,59, -30,-18,46,-118,-39,-43,-24,74,87,-59,12,3,-39,-5,-55,-80, 
  /* [29][2][][] */ -54,62,-17,-45,-71,40,-64,-4,54,-40,-39,4,12,-33,-30,-72, -82,-39,-17,29,11,-18,-57,-35,-13,60,-21,73,-58,-41,-6,50, -79,89,-42,-29,66,-74,-44,-26,79,-84,76,-74,-34,72,-47,-127, 
  /* [30][0][][] */ -22,14,34,-99,21,-10,-9,-11,-4,-26,-4,-20,-24,-84,-92,-15, -38,-38,-114,40,37,35,-106,-54,-43,24,-65,17,10,-36,-62,26, -2,8,-15,-36,8,53,-41,15,1,60,8,35,47,-3,72,14, 
  /* [30][1][][] */ -19,-1,5,-77,26,-80,-16,-19,16,-47,-2,-39,38,-4,-17,-60, -21,-66,-47,34,-58,-10,-6,-64,-102,-50,-86,-26,-26,-12,-83,-20, -61,-8,11,65,3,15,-57,-114,29,31,19,55,-4,-72,32,9, 
  /* [30][2][][] */ -23,80,-12,-18,-3,-80,-44,-15,22,-11,-21,-13,-43,-68,-32,-49, -54,-53,-69,52,-31,64,-61,-71,-38,-102,-87,-66,-32,-40,-57,-28, -48,39,9,0,-21,33,-20,-46,-9,65,42,83,-37,-11,20,127, 
  /* [31][0][][] */ 6,96,20,-4,91,-4,66,5,42,-67,94,5,18,-60,-58,-79, -24,16,-4,80,33,52,37,7,28,66,25,0,38,-42,40,7, -41,-3,-36,-5,-74,19,-86,3,6,37,39,102,-42,-105,-52,85, 
  /* [31][1][][] */ 11,34,-13,29,93,-17,5,-14,57,-77,-6,-70,-8,50,12,-94, -79,75,-109,28,78,97,-34,-102,40,95,-7,-6,-47,-48,-58,31, -87,14,-52,-106,-99,-38,-61,-86,20,12,-29,40,-35,-114,-38,79, 
  /* [31][2][][] */ -23,17,14,103,43,-82,-29,28,-23,-76,-36,-94,-26,-19,10,-59, -31,50,-64,12,8,54,-127,-72,18,-23,-29,35,-16,-12,12,98, -61,34,-70,-82,-76,-62,-34,-6,14,3,-4,5,-65,-87,-79,17, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,3,3,16 } };
const TfArray<32, float> quant5_scale = { 32, { 0.001277644420042634, 0.0012472317321226001, 0.0031893877312541008, 0.0012263859389349818, 0.0029715532436966896, 0.0029166170861572027, 0.0024966227356344461, 0.0024833602365106344, 0.001336222980171442, 0.001354618463665247, 0.00286695989780128, 0.0042580761946737766, 0.0029104379937052727, 0.0011907274601981044, 0.0018677066545933485, 0.0029518266674131155, 0.0012349518947303295, 0.003160460852086544, 0.0024820328690111637, 0.0024941391311585903, 0.0012038984568789601, 0.0012783176498487592, 0.0026655842084437609, 0.0034801294095814228, 0.0025202261749655008, 0.0024535502307116985, 0.0023214393295347691, 0.0019583445973694324, 0.0013489368138834834, 0.0027711968868970871, 0.0027627968229353428, 0.0029337878804653883, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[32] = { -2708, -2658, -1114, -2145, 620, 1882, 1019, -1586, -2950, -2484, -2749, -888, -1376, -2233, -2083, -1241, -1686, -807, -1461, -1936, -3073, -2709, -636, 422, -1693, -502, 205, 170, -2413, -31, -1013, -2059, };
const TfArray<1, int> tensor_dimension6 = { 1, { 32 } };
const TfArray<32, float> quant6_scale = { 32, { 1.7744821889209561e-05, 1.7322428902843967e-05, 4.429645196069032e-05, 1.7032907635439187e-05, 4.1271014197263867e-05, 4.0508020902052522e-05, 3.4674845664994791e-05, 3.4490647522034124e-05, 1.8558401279733516e-05, 1.8813891074387357e-05, 3.9818347431719303e-05, 5.9139147197129205e-05, 4.0422200981993228e-05, 1.6537656847503968e-05, 2.594001853140071e-05, 4.099703801330179e-05, 1.71518768183887e-05, 4.3894695409107953e-05, 3.4472210245439783e-05, 3.4640353987924755e-05, 1.672058533586096e-05, 1.7754171494743787e-05, 3.7021502066636458e-05, 4.8334477469325066e-05, 3.5002667573280632e-05, 3.4076623705914244e-05, 3.2241776352748275e-05, 2.7198862881050445e-05, 1.873497967608273e-05, 3.8488324207719415e-05, 3.8371657865354791e-05, 4.0746501326793805e-05, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[5*1664] = { 
  -10, -3, -34, -12, -36, -22, -46, -71, 1, -12, 11, -46, 0, -17, -14, -23, -18, -28, -38, -19, 17, -9, 27, 6, -47, 42, 3, -60, -9, 32, -33, -41, -13, 10, -34, 3, -10, 23, 29, 49, -7, 5, -14, 33, -36, -4, -23, -16, 0, -7, -40, -3, -1, 1, -3, -35, 14, -49, -45, 33, -13, 38, 24, 3, 2, 6, 40, 1, -34, -36, 12, 6, -25, 3, 16, -30, 22, 20, 6, -21, 9, 1, 24, -6, 17, 1, 26, 15, -34, 9, 10, 14, -4, -70, -40, -3, 6, 17, 5, 4, 0, 42, 65, 48, -18, 10, 20, 2, 56, -12, -20, 37, -14, 53, 1, 15, -1, -8, 22, -68, 45, -23, 37, 25, 6, 21, 1, 2, 5, 1, -39, -1, -23, 28, 12, -15, -8, -8, -23, -27, -13, 14, -21, 15, -8, -75, 0, -17, 10, -3, -1, 11, -15, 23, -6, -22, -1, 22, -49, -58, 5, 3, 25, 0, 15, 22, 38, 35, -2, 0, -16, -20, 1, -11, -16, 14, 1, 14, 21, 32, 2, 8, -16, -22, 20, -14, -3, 40, 8, -31, -12, 32, -6, 9, 29, 12, 52, 2, -37, 8, 8, -12, -65, 10, -10, -3, 32, -24, -13, 19, -7, -19, -6, 9, 66, 6, -1, -24, 19, -7, -17, 1, 23, 2, 9, 0, -7, -3, -22, -36, -27, -24, 6, -18, 12, -29, 19, 7, -6, 10, -2, -7, -6, -34, 7, 17, 49, 14, -63, 35, -6, 14, -20, -53, 5, -3, 0, -8, -36, -10, 3, -31, -25, -1, 15, -14, 25, 21, -6, -10, -23, -33, 0, -58, 11, -43, -5, 13, -3, -20, 1, 24, 1, -49, -11, -3, -22, -33, 0, 11, -34, 2, 31, 5, 39, 35, -12, 8, -60, -34, 15, 0, -9, -18, 6, 31, 32, 48, -21, 11, -16, -29, 52, -14, -14, 31, -10, 14, -14, 19, -12, -4, 18, -14, -24, 37, 23, 21, 17, -11, 1, -28, -5, -3, -13, 8, -18, -47, 12, -13, -6, 9, -4, 28, -26, -8, -2, 17, 1, -45, -27, -7, 3, -13, 18, -1, -35, -18, 7, -15, -2, -4, 4, -3, -21, -14, -18, 14, -15, 7, -22, 28, 9, -25, 39, 43, 7, -6, 8, 3, -11, -5, -12, -35, -16, -7, -16, -13, -13, -2, -42, -41, -10, -13, 17, -7, 16, -18, -7, -19, 9, 52, -90, -73, 16, 10, 31, -10, -76, -1, 15, -78, 6, 11, -40, -19, -12, -24, -26, 3, -37, -61, -36, -36, 8, -3, -67, -29, -7, 1, -13, -29, 7, -39, -7, -27, 13, -8, -25, -26, 3, 9, -8, -19, 12, -7, -13, 17, -1, 4, -25, -19, -8, 44, 41, -6, 10, -11, -19, 22, -1, -21, -34, 0, 4, 0, 30, 30, -18, 3, 5, -65, -5, -45, 26, 12, 11, 18, -9, -21, -17, -7, 0, 0, 50, 40, 43, -12, 15, -11, -20, -13, 5, -22, -32, 4, -4, 58, 8, 1, -18, 8, 4, 32, 13, -5, 1, 31, -10, 13, -3, 14, -13, 9, -7, 11, 4, -23, -38, -48, 3, 14, 27, 13, 26, 4, 21, 4, -6, -3, -78, -69, -6, -10, -19, 16, -44, 27, 11, -89, 0, -16, 10, 40, -13, -3, -48, -19, -4, -15, 23, -10, -11, 8, 19, -42, -10, -12, 32, 1, 5, 9, 19, 15, 6, -6, -23, 2, 17, -6, -18, 2, -13, -9, 20, -29, -3, 7, -23, -20, 8, 13, -8, 0, 9, -15, -11, -16, -36, -13, -14, -23, -9, 2, -5, 12, 6, 17, -3, -31, -3, -18, 4, 11, -11, 12, -20, -16, -3, 19, 1, -8, -31, -10, -26, -11, 11, 13, 8, -5, 4, 20, -4, -7, 10, 41, -22, 14, -9, -12, 55, 0, 26, 0, 26, -17, -16, 14, 15, 34, -2, 4, 0, -9, -21, -46, -35, -54, -9, -15, -7, -58, -7, 2, -1, -1, -12, -15, -26, -57, 0, 7, 1, 30, 47, 34, 26, -34, 0, -54, 38, 26, 2, 16, 3, -16, 6, 30, 7, -3, 6, -7, 46, 9, -10, -20, -16, 55, -10, -16, -10, 22, -4, 3, 22, 68, -22, -30, -2, 12, 0, 0, -4, -9, 5, 0, 19, -10, 17, -10, -23, -23, 11, -16, 2, -2, -11, -5, -8, 8, -8, -8, -8, -30, -25, -21, -12, -28, 2, 9, -5, 4, -3, -5, -31, -8, -14, 21, -5, 8, 56, -8, -14, 11, 19, 2, 21, 7, -16, -15, -14, -6, 3, 1, 18, 11, -14, -20, 6, -37, -7, -12, 1, 38, 4, -14, 6, -4, 14, 0, 23, -17, 3, -11, -3, -37, -4, -12, -33, -22, -2, -8, -1, -62, -15, -24, -39, -29, -13, 21, -29, -8, 24, 31, -5, -26, -4, 0, 27, 4, -27, -6, -47, -27, 10, 4, 21, 8, 12, 6, 45, -57, 5, -12, -37, 17, 17, 19, -8, 26, -12, -1, -20, -24, 8, -10, -13, 17, -12, -11, -38, -3, 4, -17, -20, -10, 0, -30, -11, -15, -16, -22, -72, 13, -7, 3, 13, -49, -12, 27, -10, 9, 6, -2, -26, 5, 15, 33, 26, -19, 8, 56, 22, -23, -22, 8, -58, -8, -26, 42, 3, 14, -15, 3, 25, -4, -20, -17, -22, 19, -3, -58, 22, 31, -20, 5, 4, -45, 13, 38, -35, 12, -12, -29, -28, -49, -23, 7, 9, 8, 21, -43, -57, -71, -16, 0, 10, -33, -1, -14, 25, -39, 0, -8, -37, -49, 5, 12, -14, 8, 5, 71, 32, -78, -13, -1, 38, 17, -11, -3, -15, 0, -17, -2, 22, 16, -4, 8, 42, -28, 4, -9, 5, 53, -20, 4, -11, 12, 7, 2, 15, -14, 8, 6, -15, 8, 11, -2, -27, 2, -14, -6, 8, -14, 21, -13, -19, -29, 4, 4, -44, 40, 0, -17, -11, -31, -12, -5, 8, 11, -15, -7, 32, 13, 6, -28, -14, -15, 2, -10, 23, -3, 13, -5, -26, 1, 10, -48, 0, -9, -18, -24, 34, -17, 20, -24, 32, -15, -11, -30, -23, 5, -18, 18, -31, 17, -22, 13, -5, -17, 11, -7, -25, -36, -11, 3, 27, -1, 43, -69, -47, -41, -3, 1, 66, -10, 7, -15, 20, -40, 18, 15, -54, -33, -16, 11, 65, 28, -40, 62, -13, -62, 0, 23, 31, 18, 5, -6, 0, 8, -24, -47, 19, 7, -3, -1, 60, -75, 6, -9, -24, 6, 8, 29, -25, 20, -1, -9, 30, -5, 3, 19, 36, 9, -2, 14, -14, 10, 11, -9, -1, -23, 11, 34, 26, 11, 13, 8, 19, -5, -5, 11, -30, 30, 9, 72, 13, 24, 8, 0, 45, 5, 32, -42, 12, 2, 6, 10, -4, -9, 2, -7, -58, -21, -24, -14, -38, 21, -25, -16, -23, 2, -9, 4, 13, -17, -12, -32, -13, 11, 3, 3, -38, 13, 26, 14, -44, -27, -1, -46, 13, -62, -13, -21, 17, -13, 14, -50, -48, -36, 3, 6, 44, 37, 15, 3, -6, 1, -25, 44, -66, -48, -3, -8, -3, 0, -28, 45, 27, -33, -16, 11, 51, 32, 15, -14, -10, 1, 5, -24, -16, 6, -19, 8, -4, -13, -23, 11, -4, 5, -9, -22, 13, 18, 9, -6, -8, 1, 26, -6, -6, 37, 7, 2, -29, -9, 5, -11, -2, -4, 17, 45, 1, 6, 19, -3, -8, 9, -23, 5, 1, 21, -13, 56, 39, 9, -2, 11, 11, 5, 0, 1, 35, 23, 3, 39, 49, -29, 18, 2, -8, -5, -38, -16, 23, 23, 0, -22, 12, -5, 18, -22, 17, -13, 3, 28, 6, -22, -11, 10, -14, 9, -19, 16, 15, -5, -9, -14, -6, -19, 0, 7, -8, -9, -2, -34, -10, -42, -2, -8, -41, 26, -26, -10, -2, -17, -12, -5, -45, -48, 2, -16, -18, 14, -23, -1, 10, -15, -8, -32, 34, 38, -15, -2, 19, -23, -13, 12, 17, 29, -1, -15, 32, -44, -9, -8, -33, 30, -9, 19, 25, 42, -17, 3, -10, -1, 40, -9, -17, 21, -3, -9, -26, -21, 5, 4, 16, -1, 4, 16, -1, 18, -2, -16, -5, 1, 12, 6, 25, 32, -12, 8, -2, -20, 10, -11, 47, -6, 14, -14, 19, 24, 4, 24, 14, 27, -1, -10, -25, -18, 16, -27, -27, 8, 5, 9, -26, 19, -4, -3, 27, -60, 11, 14, -37, 4, -16, -4, 1, 74, -3, 27, 7, 13, -4, -6, 1, 0, 13, -21, -34, -2, -26, 17, -25, 3, 11, -18, 37, 18, -8, 0, 2, 10, 3, -64, -34, 3, -10, 6, -23, -9, 14, 1, 2, -24, -10, -69, 23, 13, -16, -2, -13, -10, 42, 17, 5, 34, -10, 14, 32, 21, -38, -1, -32, 39, 12, -26, 28, 4, -9, -14, -15, 38, 3, -51, -47, 0, -8, -3, -22, -10, 4, -22, 55, -4, -35, -18, -13, -32, -15, 16, 23, 23, -17, -9, -4, 1, -6, 16, -38, -28, -9, 10, 54, 26, -20, 6, -1, -7, -12, 15, -7, 38, -20, 4, -53, 1, -22, 2, -34, 45, -9, -24, -40, -18, -2, 10, 0, -44, -26, -15, 17, -13, -9, -1, -55, 24, -12, -6, -11, 8, 8, -18, -7, -60, 6, -14, -39, -7, -22, -35, -49, -28, 1, -9, -5, 4, 1, 6, -16, -24, 2, -65, -6, -46, 10, 22, -74, -21, 57, 27, -7, -27, 14, 30, -5, 33, -1, 5, -17, 8, 27, 42, 51, 56, -8, 13, 69, -2, 10, -7, -44, 56, -1, -9, 42, 6, 1, -13, -34, -35, 26, -45, -38, 67, -1, -21, -24, -62, -8, -4, -13, 5, -29, -84, -42, 3, -3, -14, 17, 42, -12, -21, -21, 17, -4, -9, -10, -48, -4, -7, -14, 5, 39, -33, 24, -6, 5, 6, -18, 49, -4, 12, -90, 6, 12, 34, -6, 1, 10, 0, -51, 13, -29, 1, -8, -12, -15, 17, 3, -1, -1, -3, -16, 26, 36, 3, -17, 2, -9, -13, -11, -57, 
  12, -9, -21, -19, 48, 17, -29, 28, -5, 13, 39, 61, -18, 1, -75, 50, 2, -8, -44, -11, -15, -2, 26, 8, 1, -54, 12, -17, -6, -35, -29, -42, 2, 4, 36, 14, 3, 18, 1, -14, -1, -20, -63, -14, 41, -6, 23, -25, -1, -47, -8, -13, 9, 2, -64, 50, -40, 4, -9, -9, 0, -40, 14, 35, 14, 9, -2, -12, 16, 18, -4, -15, -21, -18, 6, -30, -34, -19, -21, -17, 1, 20, -24, 17, 10, -11, -57, 7, 26, 23, 17, 11, 9, 1, 6, 11, -6, 12, -5, -19, 3, 46, -11, 11, 16, -15, -1, -16, -15, 16, -30, -27, -5, -18, -17, -23, -5, 8, -30, 15, -4, 17, -16, 12, 17, -37, -29, -73, -19, -6, -19, -6, 2, 23, 32, 37, -3, 4, 25, 30, -43, 14, -48, -2, -8, -53, 9, 20, -25, 6, -2, -5, 7, 18, -4, 42, -3, 16, -19, -12, 17, 16, -4, 11, -35, 1, -46, -14, 2, 12, -37, -36, -12, 17, 37, -25, -20, -41, -27, -14, 2, 18, -12, 29, 4, 26, -4, -13, 9, -52, 32, 13, -7, -18, -29, 6, -35, -9, 32, -4, -1, -26, 18, 8, 18, 6, -43, 0, 9, -21, -11, 29, -13, -13, -50, 9, 12, 16, 28, -2, 8, -31, -11, -7, -22, -19, 19, 14, 6, 63, 36, 4, 1, 5, 40, 11, -19, 12, -12, 32, 20, 77, 35, 59, 5, -28, -51, -63, 55, -37, -4, 26, -5, 11, -10, 8, -15, 10, -22, 4, 8, 18, 34, 17, 2, -8, 35, -70, -4, 11, 15, 51, 6, -22, 15, 30, -15, 0, -19, 0, 0, 36, -2, 31, 14, 35, -72, -3, 1, 13, -15, 7, -37, -14, -55, 29, 12, -16, 20, 16, -3, -14, 14, -30, -10, -20, -10, 9, 0, -28, -23, 39, -34, -17, -2, 7, -14, -4, 40, 21, 17, 2, -43, -22, -10, -39, -20, -16, 9, 4, 18, -4, -13, -11, -13, 8, -8, 15, -5, 39, 15, -9, -27, -44, -17, -7, -6, -6, 13, -2, -3, -16, -12, -10, -6, -4, 31, -14, -16, -50, 2, 16, -17, -26, 20, -6, 4, -23, -22, 66, 8, 8, -19, -2, 48, 8, -2, -23, 4, 39, 10, 50, 14, 56, -5, 1, 4, 3, -18, -44, -4, 25, -12, -9, 19, -83, -5, -2, 36, 68, -20, -66, 25, 2, 10, -1, -22, 27, 34, 57, -12, -9, 18, -36, -37, -18, -7, -1, -7, 2, 28, 86, 57, 19, 2, -15, 40, 9, 14, -4, -21, 13, 5, 22, 19, 19, -20, -19, -32, -39, -27, -46, -8, 22, 22, -1, 28, 9, 4, -12, -44, 18, -1, -4, 21, 43, -2, 8, 11, -32, -20, -10, -18, 6, 10, 8, -11, 8, 4, -5, -52, -14, 17, 17, 15, 18, -6, -9, -58, -5, -6, -14, -29, 11, -31, 22, 24, 16, -1, -8, -17, 5, -18, 13, -9, 23, -7, -25, -10, 5, -2, -26, -21, -47, 26, -22, 16, 33, -13, -66, 6, -47, -8, -23, -6, -18, -33, 26, 14, -15, -7, -15, 48, -73, -19, 0, 5, 34, 4, -34, 18, 8, -14, -5, 28, 2, 15, 33, -18, 23, 0, -1, -74, -26, -19, 3, -4, -17, 17, 7, 8, -22, 18, 11, -37, -37, 0, 3, -24, -18, 21, 63, -4, 41, 4, 2, 34, -7, 12, -54, 9, 22, 21, 19, 18, 62, 23, -14, 15, -21, -23, 7, 25, -22, 14, 3, -2, 21, 15, 17, 17, -13, -14, 5, 2, -1, -25, 13, 47, -30, -1, 12, -2, 0, -8, 3, 6, 7, -1, -11, -54, -20, 35, 44, 16, -2, -12, -10, -32, -3, -2, -8, -18, 2, -19, -28, 64, 24, -15, -7, -61, -68, -22, -13, -44, 14, -9, 12, -4, -93, 4, 6, 5, -26, 40, -9, 26, 39, -10, -10, 21, 30, -22, 9, -8, 13, 19, 64, 4, -5, -20, -6, 36, -1, -4, 52, 23, -24, -23, 62, -40, -32, -4, -2, 42, 14, 1, 19, -19, -1, 11, -2, -70, -19, 48, 2, 21, -21, -9, 52, 16, 20, 16, -1, -4, -6, -31, 19, -2, -18, 6, 7, 47, 99, 24, -5, 6, 4, 12, -39, -5, -35, 2, 15, 21, -18, -26, -20, -10, -44, 19, -8, 28, 4, 9, 1, 24, -19, 23, 21, -3, -36, -6, -2, 20, -4, -25, -5, -30, 6, -22, 24, 65, -8, -13, 1, -9, -13, 21, 4, -4, -14, -23, -25, -9, -7, -5, 17, -54, -38, -24, 23, 26, -24, -1, 0, -19, -16, -22, 19, 27, 4, 40, -27, -42, 4, 7, -30, 34, 54, -18, -6, 27, 12, 18, 33, -1, -14, -4, -6, 40, 43, 22, 8, 13, -66, -15, 0, 7, -18, 8, -13, 63, -11, 3, 11, 3, -23, -20, 2, -48, 7, -4, -6, 35, 1, -12, 18, -47, -21, 18, 4, -1, 21, -36, 46, 22, -14, -12, 20, 52, 66, 23, 4, 42, 3, 43, 0, -39, -11, 14, -11, 73, -9, -6, 11, 20, 38, -4, 20, -36, -46, 13, -4, 77, 46, -9, -33, 51, -15, 2, -60, -22, 45, -9, 1, 8, -4, 6, -87, -48, -42, 13, -13, 12, 19, 24, 10, 20, 12, -16, -46, -7, -53, -3, 12, -66, 59, -41, 27, -3, -69, 11, 9, -5, -6, -18, -7, -1, -6, 27, -9, -59, 3, -22, -9, -58, 76, 7, -16, -10, -20, -12, 36, -17, -31, -13, 2, 19, 7, -65, -61, -19, -13, 2, -25, 14, 12, -13, 0, 27, 9, -22, -20, -51, 13, -7, -8, -75, -20, -5, 12, -3, -73, -11, -53, 29, -48, 2, -15, -34, -18, -6, 5, -26, -13, -10, -50, -17, 29, 13, 4, 20, 1, -13, -11, -5, 12, 18, -21, 44, -31, -25, -11, 16, 38, -6, -7, -20, -14, -12, -10, -11, 14, -1, -3, 41, 6, -9, -2, -38, 3, 0, 17, 37, -2, -26, -83, -11, -39, 6, -14, 35, 12, -20, 15, -35, 41, 13, -10, 1, -35, 2, 11, 10, -8, -19, 24, -45, -16, -1, -5, -9, -6, -16, 13, -29, 5, -24, 37, -76, -6, -8, 10, -78, 67, -43, -12, -35, -37, -11, -17, -57, -74, 15, -15, 5, -16, -50, -109, 10, -40, -12, -67, 10, 23, -25, -11, -29, -2, 23, -23, 6, 30, -19, 0, -52, 43, -4, 12, -20, -23, 1, -53, 46, 6, -21, -3, -63, -44, -17, 2, -38, -8, -13, -16, -28, -22, -1, 2, 10, -11, -6, -40, -32, 3, -19, 0, -32, -17, -15, -5, 15, -52, 8, -27, -21, -11, -28, -8, -26, 32, -15, -14, 6, -7, 0, -25, -31, -16, -1, 1, 26, -4, 20, -45, 28, -10, 3, -11, 44, -6, 27, -4, -46, 18, 0, 28, 2, -11, -1, -6, 74, -36, -20, -35, 2, 33, 12, 0, 17, 46, -21, -5, -51, -1, -31, 23, -22, -40, -26, -4, -85, -8, 14, -27, -19, -29, -8, -13, -28, -49, 22, 9, -11, 5, -33, -61, 13, -52, -9, -4, -16, 27, -13, 10, 4, -9, -2, -6, 25, 9, 3, -9, 44, -23, -28, -3, -4, 11, -13, -39, 30, -4, -21, 2, -63, -35, -18, 26, -34, 21, -3, -9, -55, -34, 23, -12, -29, 9, -6, -28, -3, -16, 17, 0, -61, -24, 10, -30, 1, -45, 6, -6, -33, -3, 9, -7, -42, -34, 17, -34, 2, -17, -10, -46, -42, 17, 5, -5, -44, -6, 4, 14, -24, 25, -9, -21, 42, 6, -52, -21, -21, 7, -27, -35, 21, 19, -2, 14, -8, -13, 18, -29, 1, 6, -18, 0, -14, -36, -23, -19, -16, -8, 8, 23, -20, -10, -9, 5, -107, -22, 10, -9, -11, 4, -13, 9, -42, -42, 13, -2, -51, 44, -43, -30, 28, -33, 0, -11, -14, 22, -5, 0, -4, -3, -16, -10, 13, 21, -10, 8, 7, -33, -4, 2, -23, -2, -8, -33, 16, -30, 15, 15, -39, -54, -2, 27, -23, 24, -14, -20, -39, -62, -10, -9, -1, -22, -21, -16, -1, 15, -1, -7, -11, -18, -21, 20, 1, -21, -12, -56, 9, 0, 7, -16, -48, 11, 12, -30, 18, -28, 1, 8, -28, -33, -6, -10, -9, -17, -11, 26, 4, -19, -3, -5, 3, -26, -23, 18, 1, 15, 1, -59, 3, 52, -6, -3, -2, 17, 8, -18, 5, 42, -3, 13, -25, 0, 7, -27, -31, -10, 5, -11, 8, -51, -9, 13, -12, 20, 32, 7, 27, -27, 3, 71, 2, -24, 30, 3, -42, 35, -49, -14, 40, 6, -3, 53, 23, 18, -4, 8, 6, 2, -63, -29, 3, -39, -10, -11, -32, -96, 26, -21, 38, -32, -1, -22, 11, 3, -11, 6, -37, -37, 40, 55, 10, -1, 12, -22, -48, -50, 2, 16, 11, 1, 19, 48, -18, 0, -5, -11, -35, -11, 5, 12, -4, 41, -4, -25, -19, -29, -9, 17, 24, -36, -49, 3, -6, -1, -1, -21, -7, -34, -8, 8, 65, -1, 11, 33, 24, -26, -2, -8, -22, 2, 0, -16, 30, -11, 12, -6, -47, -10, 1, -7, 21, 22, -47, 7, -2, -21, 0, -32, 19, 46, -14, -5, -18, 9, 48, 35, 29, -33, -2, -14, -52, 54, 10, 11, 12, -49, -9, 87, -47, 14, -1, -5, 33, 53, -23, -35, 62, -22, -5, -15, 43, 6, -6, -9, 16, -5, -3, -64, -11, -48, -12, 10, -10, -24, -21, -3, 47, -14, 10, 3, -4, -30, -4, -10, -5, 37, -37, 27, -6, -39, -6, -14, -18, 13, 20, -11, 6, -8, -15, -18, -59, 9, -21, 0, -2, -101, 6, -7, 15, 4, 21, 53, 1, -34, 22, 10, 71, -19, -56, 19, -4, -46, 2, 19, 11, -33, 3, 11, 81, -2, -103, 32, 25, -63, -2, 21, -30, 10, 34, -16, -27, -10, -9, -51, 2, 31, 10, -27, 21, 5, -82, -3, 26, -1, 11, -29, 31, 59, 
  -21, 12, -6, 14, -17, 13, 36, 41, 22, -8, -11, -17, 18, 2, -3, 3, 0, -53, 44, 31, -2, -11, -19, -28, 18, -42, -59, 47, 23, -30, 6, -33, 1, -2, -4, -9, -8, 22, 10, 24, -3, 15, -11, -18, -8, -6, -11, -1, -5, -17, 60, 16, -2, -8, -52, -6, 46, -52, -37, 37, 10, -12, 7, -74, -9, 12, -33, -8, 18, 1, 19, 15, 9, 9, -20, 20, -1, 15, -1, -4, -4, 1, -12, 11, 7, -17, -16, -45, 45, -71, -12, 31, 0, 1, -1, -34, -11, 9, -25, 17, -3, -22, 22, 18, 17, 7, 0, 15, -17, -1, -6, -1, 10, 15, -27, 3, 10, -15, -19, 28, -23, -31, -14, 0, 0, -3, 17, -43, 6, 0, -18, -6, -31, 14, -3, -6, 22, 12, -1, -7, 10, 15, -15, 11, 10, -37, 36, 24, 7, -2, -26, -39, 28, -10, -44, 51, -9, -10, -8, -25, 3, 10, -23, 1, 2, 18, 2, 33, -5, 14, -9, 9, -8, -8, 7, 0, -7, -28, 17, 27, -14, 3, -17, -7, 38, -40, -15, 34, -4, -14, -37, -40, 4, -15, -17, -10, -13, 12, 1, 5, -2, 6, -17, 24, -5, 10, -17, 4, -13, 33, -5, 13, 9, 16, -9, 1, -7, -13, -33, 15, 4, 17, 29, -22, 9, -9, -33, -7, 24, -8, -26, -15, 27, -4, -47, 6, 6, 10, -3, -37, 13, 21, -23, -26, 14, 9, -3, 5, 17, -30, 22, -38, -9, -7, 17, -6, -22, 14, -2, 20, -15, 15, 41, -8, -15, -3, 21, -21, -2, 18, -11, -6, -2, -8, 23, 54, 3, -16, -9, -14, -2, -26, -59, 63, -9, -8, -4, -27, -15, 12, -23, -3, 41, 21, 17, 26, 17, -3, -19, 10, -9, -7, -6, 12, 13, -14, -1, -2, 11, 14, -1, -28, 13, -9, -53, 48, -11, -12, 0, -50, 11, 3, -10, -2, 31, 25, 18, 2, -6, -6, 1, 2, -7, 7, 3, 2, -12, 32, 4, -11, -13, -12, 18, -11, 3, -39, -3, 14, -9, -8, -3, -15, -10, -1, -6, -2, 17, -9, -24, 15, -4, -11, -19, -16, 20, -5, 6, 1, -13, -25, -15, 4, -9, 4, -18, 30, 12, -40, 37, -27, 12, -1, -13, 1, 1, 3, -16, 11, 3, 3, 12, -8, 4, 8, -43, -4, 2, -1, -19, 2, 9, 1, 31, 28, 3, -14, -40, -58, -2, -56, -48, 50, 16, -5, -14, -40, -1, 8, -32, 17, -1, -7, 17, 18, -1, -5, 6, 5, -8, -8, -11, -8, -4, -37, 27, 27, -4, 10, -21, -17, 14, 2, -52, 27, -4, 5, -22, -59, -12, 13, -22, -3, 16, 31, -4, 10, 4, -8, 19, 6, 12, -9, -17, -7, -4, 12, 21, 10, -17, 10, -14, -5, -4, -41, -14, 31, -6, 3, -14, -20, 16, 2, -41, 5, -2, -20, -31, -5, -11, 13, -47, -8, 6, 15, -5, -9, 13, 2, 1, 9, 16, -4, 27, 23, -5, -38, -6, 14, 17, -11, 13, -24, 2, 8, -23, -10, -4, -17, 29, -4, 1, 3, -7, 10, 11, 0, 0, -8, -13, 18, 16, -4, 15, -10, 2, -13, 27, -45, -26, 44, 16, 10, -15, -9, -9, -5, -1, 11, 9, 18, 9, 34, 9, 11, 13, -3, -3, -10, 13, -3, -10, -72, 32, 21, -4, 0, -15, -33, -14, -46, -45, 56, -6, -11, -14, -23, -1, -13, -28, -7, -1, 29, 8, -7, 9, -2, -20, -9, 6, 6, -5, -21, -14, -28, 10, -6, -14, 13, -8, -29, 19, -39, -53, 10, 2, -13, -12, -67, -19, -16, -20, 6, 8, 28, 5, 1, 5, 9, -48, 11, -5, 4, 1, -35, 15, -18, -8, -13, 9, 11, 6, 5, 1, -40, -15, -13, 13, -2, -12, 1, -17, 0, -2, 16, -4, 32, 5, 18, 15, -8, 17, 17, 19, 11, -13, 2, 5, -45, -20, 26, -17, 14, -35, -26, 32, -62, -58, 64, 14, -1, 8, -17, -14, 14, -26, 15, -5, -2, -14, 18, -3, 1, -31, 5, -15, -9, -6, -6, 0, -11, -17, 15, -9, 10, -16, -11, 16, -39, -26, 10, -4, 9, 7, -28, -17, 3, 3, 21, 15, 17, 27, 26, -10, 17, 0, 8, 1, 8, -5, -9, 14, 5, -5, 16, -9, 6, -5, -18, 22, -25, -24, 19, 10, -14, -3, -44, 12, 2, -25, -8, 6, 20, 5, 15, 30, 0, -22, 18, -15, 17, -3, 3, 19, -22, -9, 19, 9, 7, 1, -14, -7, -33, -4, -21, -3, 19, 9, -39, 8, 6, -3, -8, -35, 2, 46, 1, 0, 19, 6, -7, 15, 10, 0, -2, 12, -73, 5, 26, 9, 2, -15, -57, 14, -28, -49, 62, 24, -2, -21, -35, -3, -6, -8, -2, -10, -14, 14, 12, -1, 3, -29, -9, 1, 3, 8, -7, -2, -58, -2, -5, -10, -7, -11, -1, 34, -29, -20, 8, -14, 14, -9, -44, -18, -6, -13, 10, -21, 14, 38, 2, 16, -2, -6, 1, -14, 2, 5, 8, 5, -44, 19, -3, -13, -2, -13, -40, 9, -73, -57, 31, 3, 12, -9, -56, -7, -8, -20, -4, -26, -10, 21, -10, 6, 15, -18, -9, -22, -14, 5, -24, -10, 17, 17, 12, -4, 7, -16, -5, -9, -46, -34, 14, 14, 18, 6, -25, 8, -12, -9, 2, -3, 14, 49, 24, -2, -8, -5, -6, 10, -2, -2, 19, 13, -23, 54, 79, 8, -5, 1, -45, 81, -44, -57, 55, 13, 2, -24, -36, 12, 3, -26, -11, 15, 16, 39, 14, 28, 8, -32, -11, 8, 12, 15, -31, 17, -29, 17, -8, -15, 11, -22, -20, 9, -2, -46, 44, -6, 20, 6, -56, -9, 7, -27, 13, -11, 43, 24, 18, 13, -7, 10, -8, 9, -6, -17, 2, -7, -31, 8, 8, 1, -12, -34, -7, 4, -38, -21, 33, 9, 1, 3, -32, -10, 6, -20, 15, -3, -2, -20, 15, 3, 10, -2, -11, 0, -3, -8, 15, -1, -23, 31, 21, 11, 7, 18, -24, 29, -49, -33, -10, 13, 0, 16, -9, 5, 15, 5, -8, -38, 18, 52, 17, 20, 16, -7, 4, 19, -5, 7, -5, 9, -50, 46, 58, 0, 10, -26, -25, 18, -51, -54, 61, 8, 7, 8, -18, 21, -12, -31, 8, 12, 4, 3, 0, -9, -1, -49, -8, 9, -2, -5, -7, 14, -28, 6, 8, 15, -8, -12, 0, 22, -15, -20, 20, 19, 18, 1, -48, -25, -2, 11, 19, 3, 22, 0, 28, -8, 9, 2, -6, -5, 10, -8, 35, 14, -35, 6, 17, 0, 3, -1, 5, 30, -15, -35, 3, -10, 14, 4, -44, 7, 6, 8, 17, 1, 55, 20, 23, 18, -3, 4, -11, -18, 7, -14, 12, -6, -32, 32, 3, -15, -6, -12, -27, -12, -24, -14, 12, 8, 8, -5, -42, -30, -11, 5, 24, -11, 11, 51, -7, 18, 8, -25, -21, -8, 11, 8, 0, -11, -51, 55, 19, 4, 4, -33, -40, 28, -43, -50, 57, 12, -14, -21, -7, 9, 9, 11, 15, 5, -1, 27, 4, 16, 14, -7, 2, 8, -3, -11, -13, 3, -13, 8, 14, 2, -1, -7, -11, 14, -27, -45, 17, 16, -12, 8, -32, 5, 2, -15, 7, -5, 9, 17, 26, -11, 20, 11, 23, -3, 15, 0, 3, -10, -55, 25, -3, 12, -7, -12, -14, 10, -56, -37, 7, 12, 1, -1, -42, -17, 1, -16, 15, 36, 42, 3, 1, 15, -7, -17, 15, 18, 19, -5, -15, 9, -5, -13, 28, 7, 18, 27, -12, 2, -38, -41, 3, 0, 19, 11, -36, -19, 15, -3, -5, -20, 1, 40, 14, 11, -12, 17, -24, 3, 7, -7, 9, -6, -65, 29, 28, 10, 0, -55, -40, 31, -25, -32, 39, 11, 0, -10, -46, -15, 5, -4, -9, 20, 21, -8, 28, 0, -12, 14, 13, 9, 4, -24, 3, -19, 13, -5, 8, -11, 6, 12, -29, 39, -60, -25, 24, 11, -10, -3, -30, 3, 2, 1, 21, -8, 20, 9, -12, -13, -6, 4, -12, 5, -6, 3, 4, 14, -41, 1, 22, -3, -5, -2, -3, -9, -8, -52, -4, 3, -3, -4, -37, -20, -4, 1, -6, 8, 10, 14, 37, 3, 0, 2, 2, -8, 2, -2, 22, -16, -32, 25, -7, -8, 10, -10, -44, 24, -45, -53, 5, 12, 10, 3, -57, -4, -9, 8, 10, 12, -10, 41, 22, -17, 23, 22, -43, 0, -2, 13, 21, -19, -50, 8, -12, -7, 3, -17, -51, 13, -28, -35, 30, 19, 21, -16, -26, -5, 9, 3, 2, 18, 14, 4, 30, 13, 10, 4, 13, 16, 20, -27, 1, -11, 47, 14, 25, -4, -3, -1, -21, 56, -43, -30, 56, 23, 23, 1, -63, 11, -14, 3, -1, 27, -19, 15, -11, 10, 14, -10, 11, 7, 18, -15, -18, 20, -27, 7, 20, 7, 1, -18, -20, 23, -45, -4, -7, -7, 16, 7, -32, 0, 5, 5, -6, -9, 10, 18, -11, -10, 11, 28, 9, 1, 4, -16, -1, 13, -42, -7, 10, 9, 13, -9, -45, -4, -56, -37, -8, -4, 9, 3, -39, -6, 8, -2, -7, 15, -4, -7, 0, 14, 22, 26, -4, 6, 10, 10, 5, -11, -21, 67, 38, 11, -7, -25, -32, 29, 28, -51, -11, 18, -14, -22, -7, 6, 11, -1, 11, 7, 20, 26, 18, 1, -12, -5, -3, 7, -8, -5, -41, -1, 22, 23, -3, 20, -8, -13, -4, 44, -5, -36, 27, 8, 22, -13, -21, -17, 3, -3, 12, -11, 52, 8, -3, 25, -3, -43, 1, 8, 16, 0, 5, -7, -14, -10, 10, 15, -18, -4, -14, -38, 14, -22, 58, 17, 8, -1, -15, 1, 9, -21, 12, -45, -9, 6, 2, -19, 6, -9, 20, -29, 13, -8, -10, -1, -62, -8, -11, 8, 12, -14, -22, -12, -23, -32, -28, 15, 0, 18, -17, 
  -8, -3, 21, 1, 27, 14, 34, 1, -17, -14, -19, 42, -1, -17, -2, -19, 8, 0, 37, 0, 16, -12, 1, 4, 0, -3, 0, -13, 0, -22, 7, 8, 0, -19, 15, -22, -31, -14, 22, 3, 4, -4, 14, -77, 7, -14, -1, -10, 5, -15, -43, -37, 7, -3, 18, 35, 23, 1, 14, -37, -18, 21, -9, -43, 14, -13, 24, -16, -1, 7, 0, 47, -7, -16, 23, -29, 29, -15, 38, 6, -10, -30, 18, 9, -21, 0, -25, -4, -7, 17, -16, 26, -13, -38, -17, 40, 7, -13, -4, 3, -42, -89, 1, -5, 5, -14, 18, -23, -11, -29, -7, 28, -20, -56, 12, 3, -6, -24, -17, -43, -13, 2, -21, -35, -7, -20, 11, -33, 12, 2, 0, -9, 4, 2, -4, 55, -14, -18, -49, 13, -8, 12, -7, 2, -7, 21, 3, -13, -10, 6, 0, 5, -23, 8, 8, -13, 5, 26, 40, 10, 19, 3, 10, -7, 0, -52, -61, -43, -4, -10, -9, 61, -15, -11, 8, -5, 10, 10, -74, -34, -12, -10, 14, 13, -26, 10, 19, -73, -3, 28, 22, -15, 13, -2, -5, -5, -54, 4, 12, -9, 6, -9, 32, -22, -32, -4, 18, 10, -5, -25, 33, 36, -4, -17, -43, -40, 23, 12, -32, 11, -14, -14, -35, 14, -12, 1, -30, -20, -18, -32, 8, 9, 1, -6, -8, -12, -8, -14, -1, 21, -5, 16, 18, 14, -20, 1, 16, -24, -11, 24, -11, 15, -4, 10, -22, -55, -14, -3, -1, -17, 30, -6, -51, -6, -2, 1, -37, 27, -33, -7, -25, -11, -1, 75, -39, -19, -3, -20, 56, -12, -70, -64, 21, -55, 2, 9, 55, 30, -11, -19, 43, 1, -40, -82, -127, -38, -9, 3, 7, 22, -6, 14, 11, 4, -8, -10, -79, -71, 1, 14, 45, 11, -72, 26, 9, -90, 1, -37, -18, 0, 15, -14, -19, -4, -96, -37, -1, 4, -9, -19, -9, -47, -6, -6, -20, 10, 8, -34, 0, 20, -14, 12, 6, -44, 29, -4, 15, 15, 13, -7, -21, 14, -1, -17, -59, -8, -45, 38, 32, 10, -13, 9, 14, 30, 3, 1, -12, 7, -20, -19, 30, 18, -10, 12, -16, -53, 10, 28, -34, 22, -3, 7, 3, -42, -7, 9, -24, 4, 41, 7, -18, 1, 2, -19, -36, 26, 10, 10, -18, 36, -2, 0, -39, 3, 7, -13, -10, -24, -1, -40, -6, -54, 7, 34, 21, 0, 5, -9, 18, 6, -41, -59, -17, 38, -3, -1, 28, 56, 20, 7, 48, -42, 5, -6, -25, -18, -3, 8, 34, -8, 40, 19, 23, 2, -13, -21, -28, 4, 3, -10, -8, 4, -33, -8, -23, -53, -19, 0, -69, -6, 45, -13, 5, -20, -13, -24, -45, -38, -6, 13, -16, -32, -65, 2, -19, -49, 14, 7, -10, 9, -1, -22, 7, -4, -10, -27, 27, 2, -10, 1, 1, -1, 13, -4, 30, 14, -26, 32, -5, 19, 2, -1, 31, 52, -4, 22, -2, -24, 11, 8, 5, 29, -7, 6, -25, -23, 12, 15, -46, 23, -15, -29, -57, -19, -24, -9, -3, -54, 5, 32, -34, -5, 0, 10, -18, 33, 10, -29, -3, -46, -11, 26, 22, 0, 16, -1, 11, 2, 17, -55, -11, -6, 1, -3, 50, 0, 43, 0, -1, 15, 5, 4, -5, -26, 3, -2, 25, 22, -41, 15, 41, -24, 6, 14, -21, 25, 4, 11, 9, 12, -3, -13, -24, -43, 2, -15, 6, -17, 15, -1, -44, -12, -10, -16, -11, 11, 16, 9, -15, 19, 0, 23, 0, -37, 6, 27, 88, -20, -5, 5, -27, -13, -30, -1, 48, -6, -2, -5, -7, -8, 48, -13, -5, 13, 3, 56, -11, 21, 5, -10, 55, 31, -12, 28, 14, -1, 13, 27, 8, 57, -13, 4, -5, -12, 27, -2, 2, 20, 6, -17, -61, 0, 13, -18, 23, -39, -15, -15, -12, 22, 19, 4, 7, -4, -43, -15, -10, -23, -13, 9, 17, 3, 18, 5, 5, -21, -14, -25, -16, -20, 11, -6, 9, -11, 12, -13, -24, 29, -20, -43, 21, -30, -13, -9, -47, 13, -14, 24, -7, -18, 3, -71, -49, -34, -17, -12, -3, 2, 50, 1, -48, -14, -16, -8, -33, 95, 24, -14, 28, -30, -3, 21, -7, 0, 9, 1, -72, 5, 21, -14, 15, 9, 11, -18, 74, 27, 4, -18, 45, -19, 4, -36, -7, 0, -20, -1, 76, -18, 39, -7, 2, 69, -30, 23, 35, -9, -3, -18, 15, 34, 27, 29, 9, -23, 13, -2, -2, -2, 11, 7, -7, -21, -34, -8, 21, 1, 8, -11, 0, 3, 0, -17, -13, 21, -8, 2, 17, -24, 11, -2, -26, 10, -36, 17, 14, 3, -5, 3, -18, 19, -9, -5, -30, -23, -11, 26, 12, 28, 4, -1, 23, -7, -23, -19, -23, 32, 9, -22, -2, -5, -6, -16, -30, -18, -2, -2, -7, 4, -16, 4, -27, -62, -6, 7, -18, 6, 15, -10, -18, -25, 11, -10, 0, 26, -3, -1, -28, 33, -4, 26, 11, -12, -3, 4, 27, 34, -4, 25, 37, 10, -10, 13, 21, 25, 5, -15, 33, -1, 5, 14, 32, 56, 21, 8, 0, -7, 15, 12, -15, -13, -5, 20, -25, 13, 3, 2, -16, 9, 42, 5, 19, 15, 9, -22, 2, -7, 20, 5, -20, -16, -28, 37, -1, -16, -6, -8, -24, -66, -19, 8, -18, -5, -10, 6, -5, -23, -4, 9, 33, 10, -27, 4, 8, -43, 3, 44, -14, -5, -17, 11, 20, 5, -5, -15, -14, -22, 0, -19, -15, 13, -10, 2, -33, -17, -1, 18, -15, -12, -5, 3, -1, 7, 4, -6, -10, -19, -19, 11, 28, -15, 4, 3, -22, -16, 33, -14, -6, 7, -15, -13, 56, 4, 0, -9, -35, 14, -15, 1, 14, 8, 2, -17, -31, 30, 4, 25, 8, 11, 4, 8, 22, -5, -2, -23, 6, -6, -5, 7, -43, -2, 4, -9, -5, -21, -11, 5, 39, -32, 2, 63, 35, 61, 7, 2, 28, 22, 27, 14, 35, 16, 8, 11, -4, 2, 9, 0, 16, -15, -41, 6, -15, -16, 5, -6, 2, -44, -6, -6, 71, 22, -15, 19, -24, -10, -1, 1, -2, 2, -37, -9, 25, -38, 0, 59, -40, -25, -2, -19, 56, 1, -19, 38, -9, 32, -10, 2, -13, 35, -10, -18, -20, -34, -12, 17, 12, 22, 14, -17, 37, -19, 16, 28, 9, 20, -13, -18, 19, 5, 1, -12, 9, -20, -16, -41, 4, -51, -11, -12, 19, -6, -21, -19, 7, -16, 5, -27, -37, -6, -13, -2, 1, -11, -12, 30, 4, -26, 4, -14, -11, -37, 1, -7, -56, -14, 2, 23, -20, -16, 0, 13, -28, 13, -15, -11, -16, -56, -12, -30, -36, -10, -10, -1, 25, 14, 18, 0, -21, 13, -17, 10, 12, -15, 4, 15, 40, -19, -29, -7, -1, -25, -15, -19, 8, 8, 16, -2, 72, 6, -15, -2, 15, 4, -18, 14, 22, 1, -1, 29, 3, -10, -4, -33, 17, 9, -10, 0, 10, -4, -5, -23, 6, -3, -14, -10, 62, -25, 19, 2, 15, 40, -20, 43, -35, -14, 6, 2, 70, 22, 27, -6, 41, -31, -12, 40, -7, 36, 14, 1, -8, 1, 24, -11, -8, -1, 0, 2, -46, -1, -1, -6, 20, -37, -15, -37, -5, 10, -4, -10, -42, -19, -48, 22, -34, 13, 5, -35, 29, -27, -13, -18, -7, -20, 25, 4, -14, 24, -5, -6, -34, 1, 24, 13, -16, 13, -9, 45, 12, -4, -11, 4, 2, 1, 36, -32, 24, 25, 7, -4, 1, 70, -4, 4, 25, 11, -21, -38, -41, -36, -7, 3, 10, -52, 4, -5, -53, 9, -13, -6, -4, -4, 8, 11, -5, 32, -17, 21, -16, -62, -4, -39, 7, 8, -4, -24, 13, -22, -24, 1, -33, -47, -18, 0, 45, -12, -11, -6, 58, -2, 14, 20, -6, -25, -20, -5, 18, 48, -114, -14, 27, -23, 3, -34, -4, 5, 2, -19, -27, -16, 14, -12, 4, -11, -21, -16, -18, 25, -26, -2, -27, -11, -4, -17, -21, -20, -8, -9, -14, 20, -4, -5, -19, -21, -18, -54, -19, 8, 2, -16, 12, -17, -10, 56, 76, 19, -24, -5, -32, 12, 26, -15, -35, 4, -16, 46, 24, -3, -16, -5, 10, -36, 23, -27, 14, 34, -10, 52, 10, 16, 3, 6, -5, -1, -57, -5, 28, -47, -15, -8, 21, -94, 7, -12, -27, 35, -9, -66, -19, 23, 13, -18, 0, 1, 67, 19, -37, -27, -7, -38, -56, -36, 6, 7, -15, 0, 20, 16, -7, -29, 6, 6, -17, 2, -1, 9, 3, -7, 11, 12, -30, -22, 5, -13, 44, 69, -70, -35, 26, -24, -3, 35, 28, 8, -16, -8, -63, -10, -53, 13, 23, 17, -8, -21, -3, -50, -3, -5, 28, -38, -9, -13, -6, 4, 9, 8, -80, 4, 1, 1, 5, -17, 8, -19, 21, 24, -2, -17, 38, -19, -10, -25, -21, -27, -17, -13, 41, 19, 3, -1, -6, 23, -17, 21, -24, -11, 3, -13, -9, -66, -9, -1, 24, -14, 6, -38, 20, 27, 3, -10, 58, -11, -94, -55, -24, 13, 2, 5, 106, -63, 3, -15, -29, 86, -5, -71, -52, -27, -16, 5, 9, -21, -17, 42, -17, -31, 2, -2, -51, -46, 4, 2, -36, -17, 39, -79, -99, 14, -18, -6, -58, 56, -40, -11, -45, 17, 2, 80, -22, -24, -20, -3, 2, 9, 2, -27, 13, -24, 6, -5, 53, 17, 7, 10, 13, -20, -51, 73, 38, -1, -17, -5, 20, 11, -8, -16, 17, -44, -1, -60, 22, 11, -23, 0, -62, 4, 20, 34, 4, 9, -6, -12, -2, 20, -1, 11, -36, 8, -101, -3, -42, -5, 1, -13, 8, -27, -17, -4, 63, 15, -12, 53, -74, -9, -4, -14, -14, 43, 12, 38, 43, 25, -10, 72, -15, 23, 
  -4, 18, 31, 8, -29, -10, -4, -7, -3, -9, 9, -24, 22, 11, 9, 6, 4, 23, -19, 2, 27, 6, -24, -1, -9, 6, -4, -2, -3, 17, 19, 21, -6, 6, -12, -10, 3, -10, -44, -22, 17, 14, 32, 53, 21, 14, -9, 40, 9, 35, 55, 19, 16, -7, 32, -11, -18, 37, 29, -19, 9, 7, -7, 12, 2, 22, -10, -6, -17, 25, -25, -47, 14, -4, -5, 46, -49, -2, -10, 1, -3, 45, -8, -14, -10, 16, 19, 8, -14, 9, 6, -18, 7, 89, 20, -20, 7, -4, -3, 19, 14, -11, -58, -14, 12, -1, -61, 10, 25, -12, 24, -45, 19, 10, 20, -13, -10, 18, 45, 67, -49, 6, 6, -39, -10, 28, 28, 48, -10, -2, 20, -3, -19, -60, -44, -72, 2, -2, 59, -30, 26, -3, 17, -14, 16, 9, -15, -40, 4, -8, -2, 5, 8, -15, 22, -47, 15, -42, 29, 50, 9, -10, -20, 0, 12, 48, 9, -27, -12, -8, 34, -28, 24, 2, -21, 30, -8, -2, 17, -7, -15, -8, 0, -9, 7, 13, 13, -11, 17, -21, -30, -2, 9, -4, -1, 3, 48, -18, -45, -23, -22, 6, -27, 6, 39, 3, -13, 28, 9, -9, -17, -55, 3, 13, 46, 6, -32, 13, -10, -63, 17, 40, 10, -7, -14, 3, 33, 22, 46, 35, 0, 16, -15, -1, 2, 15, 18, -12, 6, -22, 1, -55, -18, 1, 3, -6, -42, 41, -16, -14, 22, -49, -12, -33, 7, 37, 9, 11, 25, 2, -32, 26, 3, -47, -4, 0, -14, -10, 57, -13, 15, -11, 6, -18, -27, -17, 0, -14, -29, 40, 25, 14, 7, -13, 12, -72, 6, 15, 7, 8, -25, -8, 23, 65, 34, -23, -1, -3, -3, 3, 21, -7, -27, 35, 0, -10, 15, 8, 26, 20, -34, -10, 29, 15, 1, 4, 5, 25, -12, -26, -19, 21, 0, 7, 83, -17, 8, -22, -13, -4, 10, 60, 5, 8, 24, -5, -3, 45, -22, -43, -7, 18, -12, 41, -29, 32, -29, -26, 12, 37, 16, -6, 8, 5, 69, 19, -14, -10, -11, 5, 13, 4, 10, 0, 5, -12, 20, -9, 21, -49, -17, -31, -13, -7, -54, 13, -2, 28, -9, -35, 5, -40, 7, -5, -19, 8, 34, 8, -27, -23, 23, 19, 15, 9, -31, -6, -14, -9, 26, -49, -1, 20, 28, 17, -3, 4, 9, 7, -12, 28, 15, 20, 16, -18, 20, 8, 8, 2, 10, 8, 7, 42, 1, -41, 18, 16, -28, -35, 14, 11, -21, 30, 14, 11, -34, 9, 16, 22, -21, 38, -14, 28, -11, -54, 14, -1, 6, -16, 27, -8, 22, -3, 16, -41, -42, -14, 3, 4, 37, 23, -41, 1, 6, 25, -2, 15, -10, 19, 14, 3, 44, 46, 3, 11, -5, -39, 7, 6, 15, 13, -13, 17, 19, -7, -30, -40, -49, -18, -23, 12, 31, 6, 4, 3, -27, 6, 17, -83, 8, -30, -13, 18, -28, -57, -71, 27, -25, -44, 10, -17, -5, -20, 9, 12, 6, 20, -6, -16, 38, 2, -7, 4, 0, 12, 5, 16, -15, -10, 8, 6, 46, 42, -2, 16, 26, -27, 16, -9, 6, 1, 14, -41, -17, 15, -5, 12, -2, 14, -15, 47, -25, 5, 1, 6, -40, 26, -24, 8, -5, -2, 5, -55, -24, -11, -5, 3, -32, -28, 15, 42, 0, -48, -4, -15, -2, -32, -2, -4, 14, -12, 5, 1, 4, 28, 15, 2, 31, 4, 6, 18, 45, 32, 14, 11, 5, -23, 2, -13, -4, 36, -24, -12, 5, -19, -11, -28, -61, 26, 18, -11, 39, 19, 9, -105, -44, -7, -4, 11, 7, 26, -39, -8, 8, -17, -4, -34, -4, -35, 0, 13, -38, 14, -36, 9, -25, -9, -1, -75, 23, -86, 1, 10, 0, 15, -37, 13, -28, -11, 6, 23, -1, 5, -25, -2, -20, 10, 15, 7, 5, 14, 12, 12, -23, 0, -20, -32, 14, -32, 2, -16, -10, -10, -22, 13, -32, 26, 0, -30, 14, -4, -12, 4, 2, 2, -18, 14, -8, -27, 0, -6, -29, -17, 14, 21, 18, -64, 40, -15, -7, -6, 18, 79, 18, -29, -13, 10, -12, -3, -86, 26, 17, 14, 13, 14, 22, -77, -17, 0, -23, 44, 9, -25, 4, -7, 1, -13, 34, 18, -23, 13, -13, 2, -4, 5, -73, -26, 1, -13, -32, 12, -28, 11, -32, 5, -12, -3, -55, 11, -38, 7, 27, -56, 0, -4, -62, -14, 15, -9, -13, -1, -34, 5, -17, -14, 6, 5, 0, 10, -20, -15, -23, -7, 2, 14, -36, -5, -6, -3, 15, -29, 5, 12, 10, 19, -12, 14, 11, 2, -7, -13, 23, -30, -6, -40, -11, -13, -6, 8, -11, -15, 28, 10, 6, -9, 26, -40, -31, -24, 26, 2, -14, 22, 4, -8, 10, -27, 10, -2, 15, -26, 8, 12, 49, 25, -11, 2, 7, -35, -4, 1, 20, 1, 11, 8, 6, -7, -55, 11, 7, 4, 3, -13, -11, -23, 1, 9, -5, -32, 0, -36, -5, 24, -9, -15, -32, -55, -18, 1, -30, -12, 16, -16, -57, -26, 0, -5, -35, -12, -33, 3, 6, -25, -8, 1, -28, -19, -22, 13, 28, -10, 11, -9, -10, 16, 19, -4, 35, -26, -41, -28, 22, 3, 1, 21, 4, 20, 2, -7, 5, 13, -16, -10, 0, 39, -8, 14, 13, 4, -4, 10, -1, 27, 15, -12, 4, 21, -6, 5, -39, 16, 13, -2, -10, 12, 7, -61, -36, -2, -10, 4, -19, -7, -9, 18, -7, -25, 0, -9, 43, -5, -8, -2, 34, 10, 14, 17, -12, 5, 17, -11, 46, 18, -21, -17, 37, 15, 2, -12, -13, 9, -17, 2, 2, -7, -30, 9, 18, -17, 4, -5, -38, -5, 11, 10, 20, -20, 16, -33, -11, -27, 12, 15, 15, -14, 3, 23, -29, -23, -8, -10, -16, -9, 4, 5, 7, 1, -16, 22, 68, 9, 9, 6, -19, -3, 4, -8, -26, 22, 11, -41, -28, -73, 5, 10, 11, -9, -47, -6, 25, 6, 12, 4, -14, -16, 14, 11, -21, 17, 3, -7, 40, 29, 13, -3, -8, -22, -21, -1, -68, 2, 14, -27, 35, 43, -6, 13, -39, 24, 62, 39, -26, 44, 18, -50, -23, -8, 3, 18, -19, 16, 25, 18, -36, -54, 20, 20, 14, -26, -16, 6, 21, 50, 9, 21, -76, -45, -3, -1, -17, 36, -74, -45, 8, -57, -3, 34, 4, 18, 11, -3, -8, 22, -21, -14, -25, -4, -5, 5, -12, 4, 38, -5, -13, 1, 27, 3, -1, -28, 14, 25, -19, 16, -15, 16, 18, -21, 0, 19, 36, 35, -9, 6, 50, 13, -40, -26, 9, -11, 22, 15, 53, 16, 24, 14, 59, 29, 8, -11, -1, -16, 1, -5, -1, 1, -18, 44, 26, -33, 17, -13, 3, 25, 9, 0, -7, -10, 19, -8, 19, 39, -8, -3, 13, -49, -29, 25, -88, 8, 3, -8, -6, -9, -18, 5, 14, 11, -2, -10, 1, -13, -6, 20, -32, -53, 18, -6, -8, 16, 8, 20, -11, -34, -10, 7, -68, 21, -5, -5, 24, -16, 15, -27, -58, -7, -10, 5, -45, 20, -72, 22, 5, -51, -1, -43, 22, 11, -18, 15, 24, -9, -42, 9, -23, -14, 5, 0, 69, -21, 22, 6, -10, 40, 21, 22, -14, -27, -8, -5, 30, 32, 24, 19, 17, -36, -8, 5, -38, 23, -1, 2, 28, 3, -4, -10, 7, -19, -2, 15, 13, 17, -13, 5, -3, -38, -1, -66, -29, 35, -8, -1, -15, -18, -52, 56, -29, -24, -4, 17, 4, -22, 4, 0, 11, 13, -12, 38, 56, 57, -15, -11, 6, 26, 3, -8, 54, -20, -1, 36, 1, 26, -12, 9, 43, -12, 29, 14, 21, 28, 9, 37, -23, -13, -5, 4, 18, 11, 23, 20, -35, -22, 27, 13, -74, 22, 2, -10, -26, -21, 7, -21, -35, 5, 15, -3, -7, 5, 38, 37, -13, -52, -5, 33, 37, 18, -13, 14, 25, -1, 13, 6, -35, -11, -2, -8, 1, -6, 36, -9, 20, 31, 16, 43, -14, -27, -5, -8, 6, 1, -44, 31, 17, -21, -6, 23, 4, -26, 19, -12, -11, -8, 7, -62, -52, -37, -14, -11, 46, -2, -23, -8, 24, 24, 15, -12, -38, -55, 4, -11, -23, 2, -44, 24, -5, -29, -11, -70, 4, -4, 8, 11, 26, 4, 41, -17, -51, 43, 9, -6, -46, 76, -3, 7, 20, -39, -3, 72, 21, -21, -1, 22, 42, 40, -53, -10, 20, -26, 4, 45, 15, 15, -5, -5, 22, 23, -50, -19, -36, -19, -7, 2, 4, 18, -7, 4, 21, 26, -3, -10, -55, -36, 13, -6, -15, -38, 14, 25, -8, -46, 8, -30, 17, 41, 24, 10, 25, -5, 19, -17, 1, -10, 6, -6, 17, 37, 3, 4, -12, 24, 1, 23, 7, 11, -7, -8, 40, 31, 4, 9, 2, 13, -14, 10, -21, -1, 22, 4, -75, 11, 10, 0, 4, -18, 3, 13, -42, -18, 15, 2, 1, -27, -5, -22, 11, 27, 12, 17, 4, 33, -10, 15, -23, 11, 13, 28, 8, -24, 11, -9, -11, -12, 72, 77, 49, 20, -15, 9, -78, 45, -8, -13, 22, -60, -8, 70, 22, 31, 3, 7, 1, 21, -11, -53, -3, 35, 13, -23, 45, -6, 7, 9, 26, 2, -60, 41, 70, -56, 0, -5, 8, -44, 51, -4, 46, -37, 2, -64, -19, -3, 1, 7, 19, -7, -71, 21, -6, -45, 9, 0, -39, -2, -8, 25, -6, 3, 58, -72, -9, 2, 3, 18, -42, -15, -24, 13, -27, 12, 13, 11, -13, -7, 12, 6, 17, 10, 8, -33, -5, 4, 16, 4, 9, -11, -3, -8, 9, -2, 111, -49, 60, 36, 0, -1, 29, 14, 14, 1, -67, 16, 19, -16, 66, 9, 26, 16, 0, -75, 2, -33, -46, -13, 15, -84, 15, -5, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 5,1664 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0036243146751075983, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[5] = { 123, 103, -810, 541, -149, };
const TfArray<1, int> tensor_dimension8 = { 1, { 5 } };
const TfArray<1, float> quant8_scale = { 1, { 9.5264018455054611e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.033401571214199066, } };
const TfArray<1, int> quant9_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,50,13,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.013888700865209103, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.013888700865209103, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.026284698396921158, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.026284698396921158, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,1664 } };
const TfArray<1, float> quant14_scale = { 1, { 0.026284698396921158, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,5 } };
const TfArray<1, float> quant15_scale = { 1, { 0.22434097528457642, } };
const TfArray<1, int> quant15_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,5 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 10400, (TfLiteIntArray*)&tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 10400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 10400, (TfLiteIntArray*)&tensor_dimension11, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 5600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5600, (TfLiteIntArray*)&tensor_dimension13, 1664, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 1664, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1664, (TfLiteIntArray*)&tensor_dimension15, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
